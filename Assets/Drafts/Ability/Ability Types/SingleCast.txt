using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SingleCast : Ability
{
    private void Update()
    {
        cooldown.Update(slotIndex);
    }

    public override void Activate()
    {

        print($"[{gameObject.name}] Casting {BaseEffect.AbilityData.EffectName}");

        if (cooldown.currentCooldown > 0 || !isEnabled)
        {
            Debug.Log("Cast Aborted");
            return;
        }
            

        IEnumerator Cast()
        {

            if (baseEffect.AbilityData.StartCooldownAtCast)
                cooldown.Invoke();
            
            Parameters p = new Parameters();
            p.PutObjectExtra("Player", Player.Instance);

            yield return baseEffect.Cast(p);

            if (!baseEffect.AbilityData.StartCooldownAtCast)
                cooldown.Invoke();

        }

        StartCoroutine(Cast());
    }

    public override void setEnabled(bool enabled)
    {
        isEnabled = enabled;

        if (isEnabled)
        {
            EventBroadcaster.Instance.AddObserver(EventNames.ABILITY_EVENTS.ON_ABILITY_ACTIVATION, ActivateAbility);
            cooldown.currentCooldown = baseEffect.AbilityData.StartingCooldown;
        }  
        else
        {
            EventBroadcaster.Instance.RemoveActionAtObserver(EventNames.ABILITY_EVENTS.ON_ABILITY_ACTIVATION, ActivateAbility);
            //cooldown.Invoke();
        }

        cooldown.UpdateUI(slotIndex);

        Parameters p = new Parameters();
        p.PutExtra("Enabled", enabled);
        EventBroadcaster.Instance.PostEvent(EventNames.ABILITY_EVENTS.ON_ABILITY_SET_ACTIVE, p);
    }

    public override AbilityEffect getEffect(string ID = "")
    {
        if(string.IsNullOrEmpty(ID) || ID == baseEffect.AbilityData.AbilityID)
            return baseEffect;
        return null;
    }
}
