using System;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;


public abstract class Ability : MonoBehaviour
{

  
    protected bool isEnabled;
    public bool IsEnabled { get { return isEnabled; } }

    [SerializeField] protected string abilityID;
    public string AbilityID { get { return abilityID; } }

    [SerializeField] protected int slotIndex;
    public int SlotIndex { get { return slotIndex; } set { slotIndex = value; } }




    [SerializeField] protected AbilityEffect effectContainer;



    [SerializeField] protected CooldownHandler cooldown;


    protected AbilityEffect baseEffect;
    public AbilityEffect BaseEffect { get { return baseEffect; } }
    



    public abstract void Activate();
    public abstract void setEnabled(bool enabled);

    /// <param name="i">Ability ID of effect to retrieve</param>
    public abstract AbilityEffect getEffect(string ID = "");



    protected void ActivateAbility(Parameters p)
    {
        int slotIndex = p.GetIntExtra("Slot Index", -1);
        if ( slotIndex == this.slotIndex && slotIndex != -1)      
            Activate();     
    }



    protected virtual void Awake()
    {
        GameObject abilityContainer = Instantiate(effectContainer.gameObject);

        baseEffect = abilityContainer.GetComponent<AbilityEffect>();

        abilityContainer.transform.SetParent(transform, true);
        abilityContainer.name = baseEffect.AbilityData.EffectName;

        abilityID = baseEffect.AbilityData.AbilityID;

        //For Modifying Cooldowns
        EventBroadcaster.Instance.AddObserver(EventNames.ABILITY_EVENTS.ON_COOLDOWN_MODIFIED, (Parameters p) => {

            if (baseEffect.AbilityData.IsCooldownStatic) return;

            Action<CooldownHandler> doable = p.GetObjectExtra("CooldownHandler") as Action<CooldownHandler>;

            if (p.GetStringExtra("Ability ID", "") == abilityID)
                doable?.Invoke(cooldown);
        });

        cooldown = new CooldownHandler(baseEffect.AbilityData.Cooldown);
        cooldown.currentCooldown = baseEffect.AbilityData.StartingCooldown;
        isEnabled = false;
    }


    protected void ChangeEffect(AbilityEffect effect)
    {
        baseEffect = effect;
         
        Parameters p = new Parameters();
        p.PutObjectExtra("Base Effect", baseEffect);
        p.PutExtra("Slot Index", slotIndex);
        EventBroadcaster.Instance.PostEvent(EventNames.UI_EVENTS.ON_EFFECT_CHANGED, p);
    }

    public void Initialize(int slotIndex)
    {
        this.slotIndex = slotIndex;
        ChangeEffect(baseEffect);
        setEnabled(slotIndex > 0);
    }

}
